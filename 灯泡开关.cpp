/*
初始时有 n 个灯泡处于关闭状态。第一轮，你将会打开所有灯泡。接下来的第二轮，你将会每两个灯泡关闭第二个。
第三轮，你每三个灯泡就切换第三个灯泡的开关（即，打开变关闭，关闭变打开）。第 i 轮，你每 i 个灯泡就切换第 i 个灯泡的开关。直到第 n 轮，你只需要切换最后一个灯泡的开关。
找出并返回 n 轮后有多少个亮着的灯泡。
示例 1：
输入：n = 3
输出：1 
解释：
初始时, 灯泡状态 [关闭, 关闭, 关闭].
第一轮后, 灯泡状态 [开启, 开启, 开启].
第二轮后, 灯泡状态 [开启, 关闭, 开启].
第三轮后, 灯泡状态 [开启, 关闭, 关闭]. 
你应该返回 1，因为只有一个灯泡还亮着。
示例 2：
输入：n = 0
输出：0
示例 3：
输入：n = 1
输出：1
提示：
0 <= n <= 10^9
*/

class Solution {
public:
    int bulbSwitch(int n) {
        int ret = 0;
        for (int i = 1; i <= sqrt(n); i++)
            ret++;
        return ret;
    }
};

class Solution {
public:
    int bulbSwitch(int n) {
        return sqrt(n);
    }
};
//
//现有 n 盏灯编号为1,2,...,n，共存在 n 轮调整。
//考察单盏灯
//示例1：对于 10 号灯，在第 1,2,5,10 轮会进行调整；
//示例2：对于 16 号灯，在第 1,2,4,8,16 轮会进行调整；
//第 i 盏灯会在它全部的因数处发生调整；关心因数的总数。
//若存在奇数个因数，对应调整奇数次，最后保持亮灯；否则灯灭。
//求在区间 [1, n] 上，因数总数为奇数的数字个数
//完全平方数的因数个数是奇数，非完全平方数因数个数为偶数。
