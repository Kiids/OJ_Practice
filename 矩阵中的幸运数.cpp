/*
给你一个 m * n 的矩阵，矩阵中的数字 各不相同 。请你按 任意 顺序返回矩阵中的所有幸运数。
幸运数是指矩阵中满足同时下列两个条件的元素：
在同一行的所有元素中最小
在同一列的所有元素中最大
示例 1：
输入：matrix = [[3,7,8],[9,11,13],[15,16,17]]
输出：[15]
解释：15 是唯一的幸运数，因为它是其所在行中的最小值，也是所在列中的最大值。
示例 2：
输入：matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]
输出：[12]
解释：12 是唯一的幸运数，因为它是其所在行中的最小值，也是所在列中的最大值。
示例 3：
输入：matrix = [[7,8],[1,2]]
输出：[7]
提示：
m == mat.length
n == mat[i].length
1 <= n, m <= 50
1 <= matrix[i][j] <= 10^5
矩阵中的所有元素都是不同的
*/

class Solution {
public:
    vector<int> luckyNumbers (vector<vector<int>>& matrix) {
        vector<int> ret;
        for (int i = 0; i < matrix.size(); i++)
        {
            int min = matrix[i][0];
            int index = 0;

            //找出一行中最小的数，保存数值与列下标
            for (int j = 1; j < matrix[i].size(); j++)
            {
                if (matrix[i][j] < min)
                {
                    min = matrix[i][j];
                    index = j;
                }
            }

            //判断数是否是该列的最大值
            int flag = 1;
            for (int m = 0; m < matrix.size(); m++)
            {
                if (matrix[m][index] > min)
                {
                    flag = 0;
                    break;
                }
            }
            if (flag)
                ret.push_back(min);
        }
        return ret;
    }
};
