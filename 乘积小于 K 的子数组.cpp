/*
给你一个整数数组 nums 和一个整数 k ，请你返回子数组内所有元素的乘积严格小于 k 的连续子数组的数目。
示例 1：
输入：nums = [10,5,2,6], k = 100
输出：8
解释：8 个乘积小于 100 的子数组分别为：[10]、[5]、[2],、[6]、[10,5]、[5,2]、[2,6]、[5,2,6]。
需要注意的是 [10,5,2] 并不是乘积小于 100 的子数组。
示例 2：
输入：nums = [1,2,3], k = 0
输出：0
提示: 
1 <= nums.length <= 3 * 10^4
1 <= nums[i] <= 1000
0 <= k <= 10^6
*/

class Solution {
public:
    int numSubarrayProductLessThanK(vector<int>& nums, int k) {
        int mul = 1, ret = 0;
        for (int i = 0, j = 0; j < nums.size(); j++)
        {
            mul *= nums[j];
            while (i <= j && mul >= k)
                mul /= nums[i++];
            ret += j - i + 1;
        }
        return ret;
    }
};

//滑动窗口，记录窗口内所有数的乘积。在每次窗口内乘积满足条件时，向结果加上满足条件的区间数。
//右边界确定时所有满足条件的子数组应该有 j - i + 1 个。

