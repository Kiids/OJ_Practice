/*
给定一个长度为N(N>1)的整型数组A，可以将A划分成左右两个部分，左部分A[0..K]，右部分A[K+1..N-1]，K可以取值的范围是[0,N-2]。求这么多划分方案中，左部分中的最大值减去右部分最大值的绝对值，最大是多少？
给定整数数组A和数组的大小n，请返回题目所求的答案。
测试样例：
[2,7,3,1,1],5
返回：6
*/

class MaxGap {
public:
    int findMaxGap(vector<int> A, int n) {
        // write code here
        int amax = A[0];
        int amin = INT_MIN;
        for (int i = 1; i < n; i++)
            amax = max(amax, A[i]);
        amin = min(A[0], A[n - 1]);
        return amax - amin;
    }
};
// 直接找max，min取两端的数
// 不用考虑max在哪，因为无论在哪，min都只会<=max
// 这个K的移动情况会有两种极端的情况，【第一种】：A[0]与后面所有；
// 【第二种】：A[n-1]与前面所有
// 而其他的任何情况都一定会比他们俩的最大的那一个小
// 以第一种举例，假设现在k右移，变成了A[0]A[1]与后面所有，那么左边部分的最大值就可能会变大，右边部分的最大值就可能变小，从而最后的差值变小，以此类推。
// 所以此题的解只会在这两种情况里面产生
// 以第一种举例，假设现在k右移，变成了A[0]A[1]与后面所有，那么左边部分的最大值就可能会变大”，
// 即如果A[1] > A[0]，那么左边部分的最大值会变大，相应最终结果就会变小，所以不可能。
// 如果A[1] < A[0]，那么左边的最大值依旧是A[0]，所以最小的只需判断首尾就好了
