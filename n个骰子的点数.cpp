/*
把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s的所有可能的值出现的概率。
你需要用一个浮点数数组返回答案，其中第 i 个元素代表这 n 个骰子所能掷出的点数集合中第 i 小的那个的概率。
示例 1:
输入: 1
输出: [0.16667,0.16667,0.16667,0.16667,0.16667,0.16667]
示例 2:
输入: 2
输出: [0.02778,0.05556,0.08333,0.11111,0.13889,0.16667,0.13889,0.11111,0.08333,0.05556,0.02778]
限制：
1 <= n <= 11
*/

// 动态规划 
// 投 i 轮骰子，sum 的范围是 [i, 6*i]
// n 轮骰子的概率结果可以由 n-1 轮骰子的概率结果推导得出 
/* 
状态转移方程
最后一个阶段也就是投掷完 n 枚骰子后的这个阶段，我们用 dp[n][j]dp[n][j] 来表示最后一个阶段点数 j 出现的次数
for (第n枚骰子的点数 i = 1; i <= 6; i ++) {
    dp[n][j] += dp[n-1][j - i]
}
边界处理
第一阶段的状态：投掷完 1 枚骰子后，它的可能点数分别为 1, 2, 3, ... , 6，并且每个点数出现的次数都是 1 
for (int i = 1; i <= 6; i ++) {
    dp[1][i] = 1;
}
每个阶段的状态都只和它前一阶段的状态有关，因此我们不需要用额外的一维来保存所有阶段。
用一维数组来保存一个阶段的状态，然后对下一个阶段可能出现的点数 j 从大到小遍历，实现一个阶段到下一阶段的转换
*/
class Solution {
public:
    vector<double> twoSum(int n) {
        int dp[70];
        memset(dp, 0, sizeof(dp));
        for (int i = 1; i <= 6; i++)
            dp[i] = 1;
        for (int i = 2; i <= n; i++)
        {
            for (int j = 6 * n; j >= i; j--)
            {
                dp[j] = 0;
                for (int cur = 1; cur <= 6; cur++)
                {
                    if (j - cur < i - 1)
                        break;
                    dp[j] += dp[j - cur];
                }
            }
        }
        vector<double> ret;
        for (int i = n; i <= 6 * n; i++)
            ret.push_back(dp[i] * 1.0 / pow(6, n));
        return ret;
    }
};
