/*
给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1），每段绳子的长度记为 k[0],k[1]...k[m] 。请问 k[0]*k[1]*...*k[m] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。
答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。
示例 1：
输入: 2
输出: 1
解释: 2 = 1 + 1, 1 × 1 = 1
示例 2:
输入: 10
输出: 36
解释: 10 = 3 + 3 + 4, 3 ×3 ×4 = 36
提示：
2 <= n <= 1000
*/

//动态规划
//4可以拆成2 2，5可以拆成2 3,后面的数都可以用2或者3表示且比原数大，尽可能多的3才会带来最大值。
//那么递归过程就很好写了。因为必须保证最少两段，所以前期分出来了一部分副作用的1，直到6才能完成最佳的取值
class Solution {
public:
    int cuttingRope(int n) {
        if (n == 1)
            return 1;
        if (n <= 3)
            return n - 1;
        switch (n)
        {
            case 4:
                return 4;
            case 5:
                return 6;
            case 6:
                return 9;
        }
        vector<long> dp(n + 1, 0);
        dp[1] = dp[2] = 1;
        dp[3] = 2;
        dp[4] = 4;
        dp[5] = 6;
        dp[6] = 9;
        for (int i = 7; i <= n; i++)
            dp[i] = dp[i - 3] * 3 % 1000000007;
        return dp[n];
    }
};
