/*
UTF-8 中的一个字符可能的长度为 1 到 4 字节，遵循以下的规则：
对于 1 字节的字符，字节的第一位设为 0 ，后面 7 位为这个符号的 unicode 码。
对于 n 字节的字符 (n > 1)，第一个字节的前 n 位都设为1，第 n+1 位设为 0 ，后面字节的前两位一律设为 10 。剩下的没有提及的二进制位，全部为这个符号的 unicode 码。
这是 UTF-8 编码的工作方式：
   Char. number range  |        UTF-8 octet sequence
      (hexadecimal)    |              (binary)
   --------------------+---------------------------------------------
   0000 0000-0000 007F | 0xxxxxxx
   0000 0080-0000 07FF | 110xxxxx 10xxxxxx
   0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx
   0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
给定一个表示数据的整数数组，返回它是否为有效的 utf-8 编码。
注意：
输入是整数数组。只有每个整数的 最低 8 个有效位 用来存储数据。这意味着每个整数只表示 1 字节的数据。
示例 1：
data = [197, 130, 1], 表示 8 位的序列: 11000101 10000010 00000001.
返回 true 。
这是有效的 utf-8 编码，为一个2字节字符，跟着一个1字节字符。
示例 2：
data = [235, 140, 4], 表示 8 位的序列: 11101011 10001100 00000100.
返回 false 。
前 3 位都是 1 ，第 4 位为 0 表示它是一个3字节字符。
下一个字节是开头为 10 的延续字节，这是正确的。
但第二个延续字节不以 10 开头，所以是不符合规则的。
*/

class Solution {
public:
    bool validUtf8(vector<int>& data) {
        int ret = 0;  // 判断 data 首字节后一共有几个字节
        for (const int& e : data)
        {
            if (ret == 0)
            {
                if ((e >> 5) == 0b110)         // 首字节 110xxxxx
                    ret = 1;
                else if ((e >> 4) == 0b1110)   // 首字节 1110xxxx
                    ret = 2;
                else if ((e >> 3) == 0b11110)  // 首字节 11110xxx
                    ret = 3;
                else if ((e >> 7))
                    return false;
            }
            else
            {
                if ((e >> 6) != 0b10)          // 面字节 10xxxxxx
                    return false;
                ret--;
            }
        }
        return ret == 0;                       // 首字节 0xxxxxxx
    }
};

// 模拟 判断位
// UTF-8 中的一个字符可能的长度为 1 到 4 字节,因此只判断编码中的前1-5bits value.
// 分5种情况:
// 首字节（4种情况）：0xxxxxxx, 110xxxxx, 1110xxxx, 11110xxx, 后面字节（1种情况）：10xxxxxx
// 需要对这5种情况分别进行讨论便知道所给编码是否合法.
// 判断采用右移法

