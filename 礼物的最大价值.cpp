/*
在一个 m*n 的棋盘的每一格都放有一个礼物，每个礼物都有一定的价值（价值大于 0）。你可以从棋盘的左上角开始拿格子里的礼物，并每次向右或者向下移动一格、直到到达棋盘的右下角。给定一个棋盘及其上面的礼物的价值，请计算你最多能拿到多少价值的礼物？
示例 1:
输入: 
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
输出: 12
解释: 路径 1→3→5→2→1 可以拿到最多价值的礼物
提示：
0 < grid.length <= 200
0 < grid[0].length <= 200
*/

// 动态规划 
class Solution {
public:
    int maxValue(vector<vector<int>>& grid) {
        if (grid.size() == 0 || grid[0].size() == 0)
            return 0;
        vector<vector<int>> v(grid);
        for (int i = 1; i < v[0].size(); i++)
            v[0][i] += v[0][i - 1];
        for (int i = 1; i < v.size(); i++)
            v[i][0] += v[i - 1][0];
        for (int i = 1; i < v.size(); i++)
        {
            for (int j = 1; j < v[0].size(); j++)
            {
                v[i][j] += max(v[i - 1][j], v[i][j - 1]);
            }
        }
        int x = v.size() - 1;
        int y = v[0].size() - 1;
        return v[x][y];
    }
};
