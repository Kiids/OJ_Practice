/*
给你一个整数数组 nums ，数组中共有 n 个整数。132 模式的子序列 由三个整数 nums[i]、nums[j] 和 nums[k] 组成，并同时满足：i < j < k 和 nums[i] < nums[k] < nums[j] 。
如果 nums 中存在 132 模式的子序列 ，返回 true ；否则，返回 false 。
示例 1：
输入：nums = [1,2,3,4]
输出：false
解释：序列中不存在 132 模式的子序列。
示例 2：
输入：nums = [3,1,4,2]
输出：true
解释：序列中有 1 个 132 模式的子序列： [1, 4, 2] 。
示例 3：
输入：nums = [-1,3,2,0]
输出：true
解释：序列中有 3 个 132 模式的的子序列：[-1, 3, 2]、[-1, 3, 0] 和 [-1, 2, 0] 。
提示：
n == nums.length
1 <= n <= 2 * 10^5
-10^9 <= nums[i] <= 10^9
*/

class Solution {
public:
    bool find132pattern(vector<int>& nums) {
        stack<int> s;
        int x = INT_MIN;
        for (int i = nums.size() - 1; i >= 0; i--)
        {
            if (nums[i] < x)
                return true;
            while (!s.empty() and s.top() < nums[i])
            { 
                x = max(x, s.top());
                s.pop();
            }
            s.push(nums[i]);
        }
        return false;
    }
};

//从 132 的大小特性去分析，如果在确定一个数之后，如何快速找到另外两个数（使用 ijk 代指 132 结构）：
//枚举 i：由于 i 是 132 结构中最小的数，那么相当于从 i 后面，找一个对数 (j,k)，使得 (j,k) 都满足比 i 大，
//同时 j 和 k 之间存在 j > k 的关系。由于遍历是单向的，因此将问题转化为找 k，首先 k 比 i 大，
//同时在 [i, k] 之间存在比 k 大的数即可。
//枚举 j：由于 j 是 132 结构里最大的数，因此我们需要在 j 的右边中比 j 小的「最大」的数，
//在 j 的左边找比 j 小的「最小」的数。这很容易联想到单调栈，但是朴素的单调栈是帮助我们找到左边或者右边「最近」的数，
//无法直接满足我们「最大」和「最小」的要求，需要引入额外逻辑。
//枚举 k：由于 k 是 132 结构中的中间值，这里的分析逻辑和「枚举 i」类似，因为遍历是单向的，我们需要找到 k 左边的 i，
//同时确保 [i,k] 之间存在比 i 和 k 大的数字。
//以上三种「枚举 i」的做法是最简单的。
//因为如果存在 (j,k) 满足要求的话，只需要找一个最大的满足条件的 k，通过与 i 的比较即可。
//维护一个「单调递减」的栈，使用 k 记录所有出栈元素的最大值（k 代表满足 132 结构中的 2）。
//当遍历到 i，只要满足发现满足 nums[i] < k，说明我们找到了符合条件的 i j k。

