/*
给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, ...）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。
给你一个整数 n ，返回和为 n 的完全平方数的 最少数量 。
完全平方数 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。
示例 1：
输入：n = 12
输出：3 
解释：12 = 4 + 4 + 4
示例 2：
输入：n = 13
输出：2
解释：13 = 4 + 9
提示：
1 <= n <= 10^4
*/

class Solution {
public:
    int numSquares(int n) {
        int maxNum = (int)sqrt(n);
        vector<int> v;
        for (int i = 1; i <= maxNum; i++)
            v.push_back((int)pow(i, 2));
        vector<int> ret(n+1, INT_MAX);
        ret[0] = 0;
        for (int i = 1; i <= n; i++)
            for (int j : v)
                if (i - j >= 0 && ret[i-j] != INT_MAX)
                    ret[i] = min(ret[i], ret[i - j] + 1);
        return ret[n];
    }
};
