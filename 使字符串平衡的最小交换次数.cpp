/*
给你一个字符串 s ，下标从 0 开始 ，且长度为偶数 n 。字符串 恰好 由 n / 2 个开括号 '[' 和 n / 2 个闭括号 ']' 组成。
只有能满足下述所有条件的字符串才能称为 平衡字符串 ：
字符串是一个空字符串，或者
字符串可以记作 AB ，其中 A 和 B 都是 平衡字符串 ，或者
字符串可以写成 [C] ，其中 C 是一个 平衡字符串 。
你可以交换 任意 两个下标所对应的括号 任意 次数。
返回使 s 变成 平衡字符串 所需要的 最小 交换次数。
示例 1：
输入：s = "][]["
输出：1
解释：交换下标 0 和下标 3 对应的括号，可以使字符串变成平衡字符串。
最终字符串变成 "[[]]" 。
示例 2：
输入：s = "]]][[["
输出：2
解释：执行下述操作可以使字符串变成平衡字符串：
- 交换下标 0 和下标 4 对应的括号，s = "[]][][" 。
- 交换下标 1 和下标 5 对应的括号，s = "[[][]]" 。
最终字符串变成 "[[][]]" 。
示例 3：
输入：s = "[]"
输出：0
解释：这个字符串已经是平衡字符串。
提示：
n == s.length
2 <= n <= 106
n 为偶数
s[i] 为'[' 或 ']'
开括号 '[' 的数目为 n / 2 ，闭括号 ']' 的数目也是 n / 2
*/

class Solution {
public:
    int minSwaps(string s) {
        int x = 0, y = 0;
        for (auto c: s)
        {
            if (c == '[')  // [ 等待配对
                x++;
            else if (x)    // 成功配对
                x--;
            else           // 未成功配对
                y++;
        }
        if (y & 1)         // 向上取2的整数倍 
            y++;
        return y >> 1;
    }
};

//配对'[' 和']'，每次操作可以交换两个位置的']'和'['，两两匹配――'[' 在 ']' 的左边。
//交换位置的两个下标对应的是不同的字符。
//'['在越前面越容易和后面的']'配对。
//以上，交换发生在左侧的']'和右侧的'['上，即没有配对成功的']'和'['。
//每次交换可以让两对'[]'配对成功。交换']'和'['后，它们分别和不同的配对，这样就会出现两对配对成功。
//如果除去它们没有不同的未配对的']'或'['，则它们两个配对，只有一对'[]'配对成功。
//找出所有未配对的'[]'，计算交换次数。

