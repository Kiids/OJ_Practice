/*
一个有名的按摩师会收到源源不断的预约请求，每个预约都可以选择接或不接。在每次预约服务之间要有休息时间，因此她不能接受相邻的预约。给定一个预约请求序列，替按摩师找到最优的预约集合（总预约时间最长），返回总的分钟数。
注意：本题相对原题稍作改动
示例 1：
输入： [1,2,3,1]
输出： 4
解释： 选择 1 号预约和 3 号预约，总时长 = 1 + 3 = 4。
示例 2：
输入： [2,7,9,3,1]
输出： 12
解释： 选择 1 号预约、 3 号预约和 5 号预约，总时长 = 2 + 9 + 1 = 12。
示例 3：
输入： [2,1,4,5,3,1,1,3]
输出： 12
解释： 选择 1 号预约、 3 号预约、 5 号预约和 8 号预约，总时长 = 2 + 4 + 3 + 3 = 12。
*/

class Solution {
public:
    int massage(vector<int>& nums) {
        if (nums.size() == 0)
            return 0;

        int dp1 = 0, dp2 = nums[0];
        for (int i = 1; i < nums.size(); i++)
        {
            int t1 = max(dp1, dp2);
            int t2 = dp1 + nums[i];
            dp1 = t1;
            dp2 = t2;
        }
        return max(dp1, dp2);
    }
};

//动态规划
//dp[i][0] 表示考虑前 i 个预约，第 i 个预约不接的最长预约时间
//dp[i][1] 表示考虑前 i 个预约，第 i 个预约接的最长预约时间
//从前往后计算 dp 值，假设我们已经计算出前 i-1 个 dp 值，考虑计算 dp[i][0/1] 的答案
//dp[i][0] 的转移方程，第 i 个预约不接，所以第 i-1 个预约接或不接都可以，故可以从 dp[i-1][0] 和 dp[i-1][1] 两个状态转移过来
//转移方程即为：dp[i][0]=max(dp[i-1][0],dp[i-1][1])
//dp[i][1] ，第 i 个预约要接，所以第 i-1 个预约不接，只能从 dp[i-1][0] 这个状态转移过来
//转移方程即为：dp[i][1]=dp[i-1][0]+numsi   numsi表示第 i 个预约时长
//即 max(dp[n][0],dp[n][1]) ，其中 n 表示预约的个数
//计算 dp[i][0/1] 时，只与前一个状态 dp[i-1][0/1] 有关，所以只用两个变量 dp1 dp2
//分别存储 dp[i-1][0] 和 dp[i-1][1] ，然后更新答案
