/*
你需要采用前序遍历的方式，将一个二叉树转换成一个由括号和整数组成的字符串。
空节点则用一对空括号 "()" 表示。而且你需要省略所有不影响字符串与原始二叉树之间的一对一映射关系的空括号对。
示例 1:
输入: 二叉树: [1,2,3,4]
       1
     /   \
    2     3
   /    
  4     

输出: "1(2(4))(3)"
解释: 原本将是“1(2(4)())(3())”，
在你省略所有不必要的空括号对之后，
它将是“1(2(4))(3)”。
示例 2:
输入: 二叉树: [1,2,3,null,4]
       1
     /   \
    2     3
     \  
      4 

输出: "1(2()(4))(3)"
解释: 和第一个示例相似，
除了我们不能省略第一个对括号来中断输入和输出之间的一对一映射关系。
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void _tree2str(TreeNode* t, string& s)
    {
        if (t)
        {
            s += '(';
            s += to_string(t->val);
            if (t->left == NULL && t->right != NULL)
                s += "()";
            else
                _tree2str(t->left, s);
            _tree2str(t->right, s);
            s += ')';
        }
    }
    string tree2str(TreeNode* t) {
        if (t == NULL)
            return "";

        string ret;
        _tree2str(t, ret);
        ret = ret.substr(1, ret.size()-2);
        return ret;
    }
};
