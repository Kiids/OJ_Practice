/*
给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。
示例 :
给定二叉树
          1
         / \
        2   3
       / \     
      4   5    
返回 3, 它的长度是路径 [4,2,1,3] 或者 [5,2,1,3]。
注意：两结点之间的路径长度是以它们之间边的数目表示。
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    int max_length = 0;
public:
    int diameterOfBinaryTree(TreeNode* root) {
        if (root == nullptr)
            return 0;
        dfs(root);
        return max_length;
    }

    int dfs(TreeNode* root)
    {
        if (!root->left && !root->right)
            return 0;
        int left_depth = root->left == nullptr ? 0 : dfs(root->left) + 1;
        int right_depth = root->right == nullptr ? 0 : dfs(root->right) + 1;
        max_length = std::max(max_length, (left_depth + right_depth));
        return std::max(left_depth, right_depth);
    }
};
