/*
给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i != j、i != k 且 j != k ，同时还满足 nums[i] + nums[j] + nums[k] == 0 。请
你返回所有和为 0 且不重复的三元组。
注意：答案中不可以包含重复的三元组。
示例 1：
输入：nums = [-1,0,1,2,-1,-4]
输出：[[-1,-1,2],[-1,0,1]]
解释：
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。
不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。
注意，输出的顺序和三元组的顺序并不重要。
示例 2：
输入：nums = [0,1,1]
输出：[]
解释：唯一可能的三元组和不为 0 。
示例 3：
输入：nums = [0,0,0]
输出：[[0,0,0]]
解释：唯一可能的三元组和为 0 。
提示：
3 <= nums.length <= 3000
-10^5 <= nums[i] <= 10^5
*/

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> v;
        sort(nums.begin(), nums.end());
        int n = nums.size() - 1;
        for (int i = 0; i < n - 1; i++)                      // 遍历到数组倒数第三个数
        {
            if (nums[i] == 0)
            {
                if (nums[i + 2] == 0)
                    v.push_back({0, 0, 0});
                break;
            }
            if (i > 0 && nums[i] == nums[i - 1])             // 去重，每次循环第一个数不同
                continue;

            int l = i + 1, r = n;
            while (l < r)
            {
                if (nums[l] + nums[r] < -nums[i])
                    l++;
                else if (nums[l] + nums[r] > -nums[i])
                    r--;
                else
                {
                    v.push_back({nums[i], nums[l], nums[r]});
                    if (nums[l] == nums[r])                  // 去重，后两个相同结束循环
                        break;
                    while (l < r && nums[l + 1] == nums[l])  // 找到下一个比l大的数
                        l++;
                    l++;
                    while (l < r && nums[r - 1] == nums[r])  // 找到下一个比r小的数
                        r--;
                    r--;
                }
            }
        }
        return v;
    }
};
