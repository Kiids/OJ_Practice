/*
列表 arr 由在范围 [1, n] 中的所有整数组成，并按严格递增排序。请你对 arr 应用下述算法：
从左到右，删除第一个数字，然后每隔一个数字删除一个，直到到达列表末尾。
重复上面的步骤，但这次是从右到左。也就是，删除最右侧的数字，然后剩下的数字每隔一个删除一个。
不断重复这两步，从左到右和从右到左交替进行，直到只剩下一个数字。
给你整数 n ，返回 arr 最后剩下的数字。
示例 1：
输入：n = 9
输出：6
解释：
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]
arr = [2, 4, 6, 8]
arr = [2, 6]
arr = [6]
示例 2：
输入：n = 1
输出：1
提示：
1 <= n <= 10^9
*/

class Solution {
public:
    int lastRemaining(int n) {
        int head = 1, step = 1;
        bool left = true;
        while (n > 1)
        {
            //从左边开始移除 or（从右边开始移除，数列总数为奇数）
            if (left || n % 2 != 0)
                head += step;
            step *= 2;     // 步长 * 2
            n /= 2;        // 总数 / 2
            left = !left;  // 取反移除方向
        }
        return head;
    }
};

//每个回合更新记录head变量，当数组总数为1时，head就是最后的一个数
//什么时候更新这个head变量:
//当从左边开始移除时
//当从右边开始移除且剩余数的总数 number % 2 == 1时
//比如 2 4 6 8 10，我们从10开始移除，我们将会移除10，6，2，head被移除并且变为4
//比如 2 4 6 8 10 12，我们从12开始移除，我们将会移除12，8，4，head仍然是2
//更新head的规则:
//例：
//1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
//初始化 head = 1，left = true，step = 1，n = 24
//left判断是从左边开始还是从右边开始移除（true表示从左边开始）
//step表示head移动步长
//n题目中给出，来记录数组数字的总数
//
//第一次从左边开始移除，把head移到下一个位置（head = head + step）
//第一次循环得到
//1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 - > 2 4 6 8 10 12 14 16 18 20 22 24
//head = 2, left = false, step = 1 * 2 = 2, n = n / 2 = 12
//第二次循环从右边开始移除，只有 n % 2 == 1，这种情况下 12 % 2 == 0，我们不修改head
//第二次循环得到
//2 4 6 8 10 12 14 16 18 20 22 24 - > 2 6 10 14 18 22
//head = 2, left = true, step = 2 * 2 = 4, n = n / 2 = 6
//第三次循环从左边开始移除，将把head移动到下一个位置
//第三次循环得到
//2 6 10 14 18 22 - > 6 14 22
//head = 6, left = false, step = 4 * 2 = 8, n = n / 2 = 3
//第四次循环从右边开始移除， n(3) % 2 == 1，需要将head移动到下一个位置得到
//6 14 22 - > 14
//head = 14, left = true, step = 8 * 2 = 16, n = n / 2 = 1
//n 等于 1， 循环结束，return head
