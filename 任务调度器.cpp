/*
给你一个用字符数组 tasks 表示的 CPU 需要执行的任务列表。其中每个字母表示一种不同种类的任务。任务可以以任意顺序执行，并且每个任务都可以在 1 个单位时间内执行完。在任何一个单位时间，CPU 可以完成一个任务，或者处于待命状态。
然而，两个 相同种类 的任务之间必须有长度为整数 n 的冷却时间，因此至少有连续 n 个单位时间内 CPU 在执行不同的任务，或者在待命状态。
你需要计算完成所有任务所需要的 最短时间 。
示例 1：
输入：tasks = ["A","A","A","B","B","B"], n = 2
输出：8
解释：A -> B -> (待命) -> A -> B -> (待命) -> A -> B
     在本示例中，两个相同类型任务之间必须间隔长度为 n = 2 的冷却时间，而执行一个任务只需要一个单位时间，所以中间出现了（待命）状态。 
示例 2：
输入：tasks = ["A","A","A","B","B","B"], n = 0
输出：6
解释：在这种情况下，任何大小为 6 的排列都可以满足要求，因为 n = 0
["A","A","A","B","B","B"]
["A","B","A","B","A","B"]
["B","B","B","A","A","A"]
...
诸如此类
示例 3：
输入：tasks = ["A","A","A","A","A","A","B","C","D","E","F","G"], n = 2
输出：16
解释：一种可能的解决方案是：
     A -> B -> C -> A -> D -> E -> A -> F -> G -> A -> (待命) -> (待命) -> A -> (待命) -> (待命) -> A
提示：
1 <= task.length <= 10^4
tasks[i] 是大写英文字母
n 的取值范围为 [0, 100]

*/

class Solution {
public:
    int leastInterval(vector<char>& tasks, int n) {
        vector<int> v(26, 0);
        for (auto e : tasks)           // 记录每个字母出现的次数
            v[e - 'A']++;
        int v_max = 0, n_max = -1;
        for (auto i: v)                // 最大数量次数 
            v_max = max(i, v_max);
        for (int i = 25; i >= 0; i--)  // 最大数量的字母个数-1 
            if (v_max == v[i])
                n_max++;
        // (v_max - 1) * n + v_max + n_max 最大数量字母完成需要的时间，空隙未填满 
        return max((v_max - 1) * n + v_max + n_max, (int)tasks.size());
    }
};

// 贪心，先将空隙补齐，补齐后再在A与A之间直接加入
// 1、如果A之间的空隙没填满，仍然有字母没被填入的情况，有以下条件：
// 剩余字母都是序列中没有的，可以直接填入空挡
// 2、如果A之间的空隙已经被填满，仍然有字母没被填入的情况，有以下条件：
// 剩余字母中相同字符的数量都小于A的数量
// n空隙被填满，已经满足条件，此时A之间再插入不同的字母也可以
// 所以此时没有等待的时间，取tasks的长度就行

