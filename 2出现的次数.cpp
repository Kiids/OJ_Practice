/*
编写一个方法，计算从 0 到 n (含 n) 中数字 2 出现的次数。
示例:
输入: 25
输出: 9
解释: (2, 12, 20, 21, 22, 23, 24, 25)(注意 22 应该算作两次)
提示：
n <= 10^9
*/

class Solution {
public:
    int numberOf2sInRange(int n) {
        if (n <= 1)
            return 0;
        if (n <= 11)
            return 1;
        int a = 0, b = 0, ret = 0;
        for (long long i = 1; i <= n; i *= 10)
        {
            a = n / i; 
            b = n % i;
            ret += (a + 7) / 10 * i + (a % 10 == 2) * (b + 1);
        }
        return ret;
    }
};
/*
给定数字从个位开始向上分析
例如n=324时
- i     a      b      res
- 1     324    0      (324+7)/10*1 + 0 = 33
- 10    32     4      (32+7)/10*10 + 5 = 35
- 100   3      24     (3+7)/10*100 = 100
res和为168即为所求
个位为4，5>2，故个位为2时，个位之前的取值有0~32共33种情况
十位为2，2为统计的数字，2为固定，百位取到0~2时各位才能取到0~9共310种情况，
而百位取3时，个位仅能取到0~4共五种情况，故为310+5 = 35种情况
百位为3，当百位取2时，后两位的取值有0~99共100种情况，故为100
同理，更大的数也是同理，“+7”是为特殊情况设计，当取值为0，1，2时不会产生进位，大于2时允许产生进位
*/
