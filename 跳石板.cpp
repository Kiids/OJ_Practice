/*小易来到了一条石板路前，每块石板上从1挨着编号为：1、2、3.......
这条石板路要根据特殊的规则才能前进：对于小易当前所在的编号为K的 石板，小易单次只能往前跳K的一个约数(不含1和K)步，即跳到K+X(X为K的一个非1和本身的约数)的位置。 小易当前处在编号为N的石板，他想跳到编号恰好为M的石板去，小易想知道最少需要跳跃几次可以到达。
例如：
N = 4，M = 24：
4->6->8->12->18->24
于是小易最少需要跳跃5次，就可以从4号石板跳到24号石板
输入描述:
输入为一行，有两个整数N，M，以空格隔开。 (4 ≤ N ≤ 100000) (N ≤ M ≤ 100000)
输出描述:
输出小易最少需要跳跃的步数,如果不能到达输出-1
示例1
输入
4 24
输出
5
*/

#include <iostream>
#include <climits>
#include <cmath>
#include <vector> 
using namespace std;

void getDivisor(int x, vector<int>& v) // 求x除了1和它本身的约数 
{
    int ret = 0;
    for (int i = 2; i <= sqrt(x); ++i)
    {
        if (x % i == 0)
        {
            v.push_back(i);
            if (x / i != i)
                v.push_back(x / i);
        }
    }
}

int main()
{
    int N, M;
    while (cin >> N && cin >> M)
    {
        vector<int> res(M + 1, INT_MAX); //记录从N到该位置(cur_index)所需步数，初始值INT_MAX表示不可达  
        res[N] = 0; 
        for (int i = N; i < M; ++i)
        {
            if (res[i] == INT_MAX)
                continue;
            // 以下，位置i可达 
            vector<int> v; 
            getDivisor(i, v); // v中为i的约数，从位置i走，可选的步长 
            for (int j = 0; j < v.size(); j++)
            {
                if(i + v[j] <= M) 
                    // 从位置i走v[j]步，不超出终点M 
                    res[i+v[j]] = min(res[i+v[j]], res[i]+1); 
                    //1.位置i+v[j]原本可到达，更新为较小的
                    //从位置i走，一次v[j]步长可到达位置i+v[j],
                    //即从N到达位置i+v[j],所以一个可选方案是走ret[i]+1步，与原本的值保留较小的
                    //2.位置i+v[j]本不可达，现在已知从位置i走一次步长为v[j]可到达该位置，因此更新为ret[i]+1
            }
        }
        if(res[M] == INT_MAX)  // 每次步长为约数，不可达 
            cout << -1 << endl;
        else                   // 可达 
            cout << res[M] << endl;
    }
    return 0;
}

// 动态规划，将问题划分为若干个子问题，而若干个子问题间又拥有公共的子问题，并非独立存在，问题的核心是状态转移公式，就是说下一个问题的解决，依赖着上一个问题的解，因此就此需要创建一个链表，将每个子问题的解存入，最后组合出最优解（最大或最小解）
// 1.首先创建一个长度为M-N+1的整数数组，包括了起点与终点；
// 2.数组的元素表示从起点到达该点的最小跳跃次数，先将起点初始化为0，然后将其他元素初始化为int的最大值（一个常数），用来表示不可达；
// 3.接下来要遍历每一块石板（即整个数组）：
// 　（1）首先要判断当前元素的值是否是int的最大值，如果是，则表示不可达，跳出当前循环，否则求解当前石板编号的因数列表，因为题目要求一次跳跃的步数只能是当前石板编号的因数；
// 　（2）然后就是遍历当前石板编号的因数列表，求出当前石板到达每一个因数对应的下一个石板的最小跳跃次数（在求解之前要判断下一个石板的编号是否小于等于M，不满足条件则跳过当前循环），求最小跳跃次数时，要在对应下一个石板元素的值和当前石板元素的值+1中取最小值
// 4.最后完成遍历，判断一下数组尾元素的值是否为int的最大值，如果是表示不可达，返回-1，否则返回当前值，表示从指定起点到当前点的最小跳跃次数。

