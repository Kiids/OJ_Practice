/*
序列化二叉树的一种方法是使用 前序遍历 。当我们遇到一个非空节点时，我们可以记录下这个节点的值。如果它是一个空节点，我们可以使用一个标记值记录，例如 #。
例如，上面的二叉树可以被序列化为字符串 "9,3,4,#,#,1,#,#,2,#,6,#,#"，其中 # 代表一个空节点。
给定一串以逗号分隔的序列，验证它是否是正确的二叉树的前序序列化。编写一个在不重构树的条件下的可行算法。
保证 每个以逗号分隔的字符或为一个整数或为一个表示 null 指针的 '#' 。
你可以认为输入格式总是有效的
例如它永远不会包含两个连续的逗号，比如 "1,,3" 。
注意：不允许重建树。
示例 1:
输入: preorder = "9,3,4,#,#,1,#,#,2,#,6,#,#"
输出: true
示例 2:
输入: preorder = "1,#"
输出: false
示例 3:
输入: preorder = "9,#,#,1"
输出: false
提示:
1 <= preorder.length <= 104
preorder 由以逗号 “，” 分隔的 [0,100] 范围内的整数和 “#” 组成
*/

class Solution {
    vector<string> split(string& s)
    {
        stringstream ss(s);
        string t;
        vector<string> v;
        while (getline(ss, t, ','))
            v.push_back(t);
        return v;
    }
public:
    bool isValidSerialization(string preorder) {
        vector<string> s = split(preorder);
        int in = 0, out = 0;
        for (int i = 0; i < s.size(); i++)
        {
            if (s[i] != "#")
                out += 2;
            if (i != 0)
                in++;
            if (i != s.size() - 1 && out <= in)
                return false;
        }
        return in == out;
    }
};

//二叉树规律
//利用「二叉树」的特性
//每一个非空节点都对应了 2 个出度，空节点都对应了 0 个出度；除了根节点，每个节点都有一个入度。
//使用 in 和 out 来分别记录「入度」和「出度」的数量；m 和 n 分别代表「非空节点数量」和「空节点数量」。
//合格的二叉树最终结果必然满足 in == out。
//但不能只利用最终 in == out 来判断是否合法，这很容易可以举出反例：
//将一个合法序列的空节点全部提前，这样最终结果仍然满足 in == out，但这样的二叉树是不存在的。
//找 in 和 out 与 n 和 m 之间的关系
//合格二叉树 m 和 n 的最小的比例关系是 1 : 2：
// 4 
/// \
//# #
//遍历过程中 m 和 n 的最小的比例关系则是 1 : 0，对应了二叉树空节点总是跟在非空节点的后面这一性质。
//即在没到最后一个节点之前，是不会遇到 空节点数量 > 非空节点数量 的情况的。
//非空节点数量 >= 空节点数量 在遍历没结束前恒成立：m>=n
//遍历过程中每遇到一个「非空节点」就增加两个「出度」和一个「入度」，
//每遇到一个「空节点」只增加一个「入度」。而不管每个「非空节点」是否真实对应两个子节点。
//起始条件：
//m >= n
//in = m + n - 1
//out = 2 * m
//从第 2 个等式出发，结合第 1 个等式：
//in = m + n - 1 <= m + m - 1 = 2m - 1 = out - 1
//即可得 in + 1 <= out ，也就是 in < out 恒成立。

