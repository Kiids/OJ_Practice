/*
二货小易有一个W*H的网格盒子，网格的行编号为0~H-1，网格的列编号为0~W-1。每个格子至多可以放一块蛋糕，任意两块蛋糕的欧几里得距离不能等于2。
对于两个格子坐标(x1,y1),(x2,y2)的欧几里得距离为:
( (x1-x2) * (x1-x2) + (y1-y2) * (y1-y2) ) 的算术平方根
小易想知道最多可以放多少块蛋糕在网格盒子里。
输入描述:
每组数组包含网格长宽W,H，用空格分割.(1 ≤ W、H ≤ 1000)
输出描述:
输出一个最多可以放的蛋糕数
示例1
输入
3 2
输出
4
*/

// 欧氏距离为2的只有同行或同列间隔一个的位置，即每4*4的空间重复出现图案 
// 0 1 0 1
// 2 3 2 3
// 0 1 0 1
// 2 3 2 3
// 相同数字只能放对角位置，共计4*2=4*4/2=8个  
// 于是只需要数出每个4行中，
// i或i＋1行的蛋糕数为 (n / 4) * 2 + (n % 4 < 2 ? n % 4 : 2)
// i＋2或i+3行的蛋糕数为 ((n - 2) / 4) * 2 + ((n - 2) % 4 < 2 ? (n - 2) % 4 : 2)
// 然后算m / 4 个完整的4行  
// 再处理行数除4有余数的情况，把最后可能剩余的1～3行加进去 

#include <iostream>
using namespace std;

int main()
{
	int W, H, n = 0;
	cin >> W >> H;
	if (W%4 == 0 || H%4 == 0)  // 如果能整除即为网格数的一半  
		n = W * H / 2;
	else  // 不能整除 找规律  
		n = W * H / 2 + 1;
	cout << n << endl;
} 
